class SEGTree {
	// segmented tree using template(structure) using class...
	public:
		vector<int> seg;
		SEGTree(int n) {
			seg.resize(4 * n);
		}
void build(int ind, int low, int high, int arr[]) {
	if(low == high) {
		seg[ind] = arr[low];
		return;
	}
	
	int mid = (low + high) / 2;
	int leftInd = (ind * 2) + 1;
	int rightInd = (ind * 2) + 2;
	build(leftInd, low, mid, arr);
	build(rightInd, mid+1, high, arr);
	seg[ind] = min(seg[leftInd], seg[rightInd]);
}

int querry(int ind, int low, int high, int l, int r) {
	// l and r the actual range in which we have to apply the querry 
	// no overlap [l r] [low, high] or [low, high] [l, r]
	if(low > r || high < l) {
		return INT_MAX;
	}
	// complete over lap [l low high r]
	if(l <= low && high <= r) return seg[ind];
	
	// partial overlap
	int mid = (low + high) / 2;
	int leftInd = (ind * 2) + 1;
	int rightInd = (ind * 2) + 2;
	int left = querry(leftInd, low, mid, l, r);
	int right = querry(rightInd, mid+1, high, l, r);
	return min(left, right);
}
void update(int ind, int low, int high, int i, int val) {
	if(low == high) {
		seg[ind] = val;
		return;
	}
	int mid = (low + high) / 2;
	if(i <= mid) {
		// go left
		update(ind*2 + 1, low, mid, i, val);
	}else {
		// go right
		update(ind*2 + 2, mid+1, high, i, val);
	}
	seg[ind] = min(seg[ind*2 + 1] , seg[ind*2 + 2]);
}
};
